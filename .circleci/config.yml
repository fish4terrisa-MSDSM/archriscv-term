version: 2
general:
  artifacts:
imagebuilder: &imagebuilder
 steps:
  - run: 
      name: install depends
      command: |
        echo "[archlinuxcn]" >> /etc/pacman.conf
        echo "Server = https://repo.archlinuxcn.org/\$arch" >> /etc/pacman.conf
        pacman -Syy
        pacman-key --init
        pacman -S archlinuxcn-keyring --noconfirm
        #wget -c "https://repo.archlinuxcn.org/x86_64/devtools-riscv64-1.5.1-1-x86_64.pkg.tar.zst"
        #pacman -U devtools-riscv64-1.5.1-1-x86_64.pkg.tar.zst
        pacman -S arch-install-scripts git qemu-img riscv64-linux-gnu-gcc devtools-riscv64 --noconfirm
  - run:
      name: checkout build tree
      command: |
        mkdir -p ~/.ssh/
        pacman -Syy;
        pacman -S openssh --noconfirm;
        pacman -S libguestfs --noconfirm
        pacman -S git make wget unzip zip --noconfirm
        ssh-keyscan -H github.com >> ~/.ssh/known_hosts
        git clone $CIRCLE_REPOSITORY_URL ~/project
        mv /root/project/archriscv-app/app/src/main/assets/environment/opensbi.zip /root/project/archriscv-app/app/src/main/assets/environment/data.bin
        git reset --hard $CIRCLE_SHA1
  - run:
      name: unzip arch image
      command: |
        cd ~/project/image
        tar -zxvf ./arch.tar.gz
        mkdir -p ~/arch
  - run:
      name: setup the base system
      command: |
        #pacstrap -C /usr/share/devtools/pacman-extra-riscv64.conf -M ~/arch base dhclient  
do_steps: &do_steps
 steps:
  - run: echo "$CROSS_COMPILE" > ~/_cross_compile
  - restore_cache:
      key: code-tree-shallow-{{ .Environment.CACHE_VERSION }}
  - run:
      name: checkout build tree
      command: |
        mkdir -p ~/.ssh/
        pacman -Syy;
        pacman -S openssh --noconfirm;
        pacman -S git make wget unzip zip pandoc --noconfirm
        pacman -S jdk11-openjdk --noconfirm
        #source /etc/profile.d/jre.sh
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk/
        ssh-keyscan -H github.com >> ~/.ssh/known_hosts
        git clone $CIRCLE_REPOSITORY_URL ~/project
        mv /root/project/archriscv-app/app/src/main/assets/environment/opensbi.zip /root/project/archriscv-app/app/src/main/assets/environment/data.bin
        rm -rf /root/project/archriscv-app/app/src/main/assets/environment/.gitkeep
        git reset --hard $CIRCLE_SHA1
  - run:
      name: build help pages
      command: |
        cd ~/project/help-page
        make all
        cd ~/project
  - run:
      name: get sdk & ndk
      command: |
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk/
        #source /etc/profile.d/jre.sh
        cd ~/project
        ~/project/scripts/setup-android-sdk.sh
  - run:
      name: clean app
      command: |
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk/
        #source /etc/profile.d/jre.sh
        cd ~/project
        cp ~/project/archriscv-app/local.properties.circleci ~/project/archriscv-app/local.properties
        cd ~/project/archriscv-app
        JAVA_HOME=/usr/lib/jvm/java-11-openjdk/ ./gradlew clean
  - run:
      name: build apk-release app
      command: |
        export JAVA_HOME=/usr/lib/jvm/java-11-openjdk/
        #source /etc/profile.d/jre.sh
        cd ~/project
        cd archriscv-app
        JAVA_HOME=/usr/lib/jvm/java-11-openjdk/ ./gradlew build
        cd ~/project/archriscv-app/app/build/outputs/apk/release/
        zip -r archlinux-riscv64-term.apk.zip app-release.apk
  - store_artifacts:
      path: ~/project/archriscv-app/app/build/outputs/apk/release/archlinux-riscv64-term.apk.zip
      destination: archlinux-riscv64-term.apk.zip
jobs:
  android-aarch64:
   docker:
     - image: archlinux:latest
   environment:
     CROSS_COMPILE: "aarch64-linux-android-"
   <<: *do_steps
  imagebuilder:
   docker:
     - image: archlinux:latest
   <<: *imagebuilder
   
workflows:
  version: 2
  build:
    jobs:
     - android-aarch64

