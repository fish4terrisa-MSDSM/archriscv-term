#!/bin/bash
##
##  QEMU Launcher.
##
##  Leonid Plyushch <leonid.plyushch@gmail.com> (C) 2018-2019
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

# All files that will be created by launcher or child processes should
# have private-only access.
umask 0000

# Ignore signals QUIT, INT, TERM.
trap '' QUIT INT TERM

# Exit with error on non-declared variable.
set -o nounset

##############################################################################
##
##  GLOBAL ENVIRONMENT VARIABLES
##
##  These variables should be read-only.
##
##############################################################################

# A path to root directory of the environment.
# Note: This variable can be overridden by client application.
: "${PREFIX:=/data/data/fish4terrisa.archlinux.riscv64/files/environment}"
readonly PREFIX
export PREFIX

# A path to home directory.
# Note: This variable can be overridden by client application.
: "${HOME:=/data/data/fish4terrisa.archlinux.riscv64/files}"
readonly HOME
export HOME

# Path to directory. where temporary files will be stored.
# Note: This variable can be overridden by client application.
: "${TMPDIR:=/data/data/fish4terrisa.archlinux.riscv64/files/environment/tmp}"
readonly TMPDIR
export TMPDIR

# A path to Android's shared storage.
# Note: This variable can be overridden by client application.
: "${EXTERNAL_STORAGE:=/storage/emulated/0}"
readonly EXTERNAL_STORAGE

# A path to OS image.
declare -r OS_IMAGE_PATH="${EXTERNAL_STORAGE}/archriscv.qcow2"

# A path to QEMU's pid file.
declare -r QEMU_PIDFILE_PATH="${TMPDIR}/qemu_running.pid"

##############################################################################
##
##  CONFIGURATION ENVIRONMENT VARIABLES
##
##  These variables should be set by client application. Default values
##  are the same, as configured in client application.
##
##############################################################################

# A maximal amount of RAM (in megabytes) that should be available for QEMU.
: "${CONFIG_QEMU_RAM:=2048}"

# persistent mode was used.
: "${CONFIG_QEMU_HDD1_PATH:=/storage/emulated/0/archriscv.qcow2}"

# A path to secondary HDD image. Completely managed by user.
: "${CONFIG_QEMU_HDD2_PATH:=}"

# A path to the CD-ROM image. Completely managed by user.
: "${CONFIG_QEMU_CDROM_PATH:=}"

# An IP address of upstream DNS server.
: "${CONFIG_QEMU_DNS:=8.8.8.8}"

# A set of rules for port forwarding.
: "${CONFIG_QEMU_EXPOSED_PORTS:=}"

##############################################################################
##
##  COMMON FUNCTIONS
##
##############################################################################

# Blocks user input. Use this when progress/information message
# should be displayed. Terminal can be unblocked by either
# 'unblock_terminal' function or by command 'tput reset'.
block_terminal() {
    libbusybox.so stty -echo -icanon time 0 min 0
}

# Consume all unwanted input captured and unblock terminal. Use this
# after 'block_terminal'.
unblock_terminal() {
    while read -r; do
        true;
    done
    libbusybox.so stty sane
}

# Same as 'echo' but text will be wrapped according to current terminal
# width. Slower than 'echo'.
msg() {
    local text_width

    if [[ $(libtput.so cols) -gt 70 ]]; then
        text_width="70"
    else
        text_width=$(libtput.so cols)
    fi

    echo "${@}" | libbusybox.so fold -s -w "${text_width}"
}

gen_hostfwd_rules() {
    local hostfwd_rules=""
    local used_tcp_external_ports=""
    local used_udp_external_ports=""
    local proto internal external

    if [ -n "${CONFIG_QEMU_EXPOSED_PORTS}" ]; then
        for rule in ${CONFIG_QEMU_EXPOSED_PORTS//,/ }; do
            proto=$(echo "${rule}" | libbusybox.so cut -d: -f1)
            external=$(echo "${rule}" | libbusybox.so cut -d: -f2)
            internal=$(echo "${rule}" | libbusybox.so cut -d: -f3)

            if [ "${proto}" = "tcp" ]; then
                if ! libbusybox.so grep -q "${external}" <(echo "${used_tcp_external_ports}"); then
                    used_tcp_external_ports+=" ${external}"

                    if ! (echo >"/dev/tcp/127.0.0.1/${external}") &>/dev/null; then
                        hostfwd_rules+="hostfwd=tcp::${external}-:${internal},"
                    else
                        echo "[!] Port forwarding: external TCP port '${external}' already in use." 1>&2
                    fi
                fi
            elif [ "${proto}" = "udp" ]; then
                if ! libbusybox.so grep -q "${external}" <(echo "${used_udp_external_ports}"); then
                    used_udp_external_ports+=" ${external}"
                    hostfwd_rules+="hostfwd=udp::${external}-:${internal},"
                fi
            else
                ## Invalid proto. This shouldn't happen.
                echo "[!] Rule error: invalid proto '${proto}' specified in '${rule}'." 1>&2
            fi
        done

        echo "${hostfwd_rules%%,}"
    else
        echo
    fi
}

##############################################################################
##
##  SESSION FUNCTIONS
##
##############################################################################

# Starts QEMU (main) session. Kills other sessions on exit.
qemu_session() {
    local QEMU_SANDBOX_MODE=false
    block_terminal

    if [ "${#}" -ge 1 ]; then
        if [ "${1}" = "sandbox-mode" ]; then
	    echo "sandbox"
        else
            libbash.so -c "libbusybox.so killall -9 libsocat.so"

            msg
            msg "[BUG]: qemu_session() received unknown argument '${1}'."
            msg
            unblock_terminal

            libbusybox.so stty sane
            read -rs -p "Press enter to exit..."
            exec libbash.so -c "libbusybox.so killall -9 libbash.so; exit 1" > /dev/null 2>&1
        fi
    fi

    # Set pid file path.
    set -- "-pidfile" "${QEMU_PIDFILE_PATH}"

    # Emulate CPU with all supported extensions.
    set -- "${@}" "-machine" "virt"
    set -- "${@}" "-L" "${PREFIX}/share/qemu/"
    # Set amount of RAM.
    set -- "${@}" "-m" "${CONFIG_QEMU_RAM}"

    # Setup primary hard drive image (with the main OS installation).
    set -- "${@}" "-device" "virtio-blk-device,drive=fish0"
    set -- "${@}" "-drive" "file=/storage/emulated/0/archriscv.qcow2,snapshot=off,format=qcow2,id=fish0"

    # Setup secondary hard drive image if requested.
    if [ -n "${CONFIG_QEMU_HDD2_PATH}" ]; then
        set -- "${@}" "-drive" "file=${CONFIG_QEMU_HDD2_PATH},if=none,id=hd0"
        set -- "${@}" "-device" "virtio-blk-device,drive=hd0"
    fi

    # If sandbox mode is used, then QEMU will not write user's
    # changes to disk image.

    # Use virtio RNG. Provides a faster RNG for the guest OS.
    set -- "${@}" "-object" "rng-random,filename=/dev/urandom,id=rng0"
    set -- "${@}" "-device" "virtio-rng-pci,rng=rng0"
    set -- "${@}" "-fsdev" "local,security_model=passthrough,id=fsdev0,path=/storage/emulated/0/"
    set -- "${@}" "-device" "virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare"
    # Setup networking.
    set -- "${@}" "-netdev" "user,id=n0,$(gen_hostfwd_rules)"
    set -- "${@}" "-device" "virtio-net,netdev=n0"

    # Disable graphical output.
    set -- "${@}" "-vnc" ":10"
    #set -- "${@}" "--accel" "tcg,thread=multi"
    # Monitor.
    set -- "${@}" "-chardev" "tty,id=monitor0,mux=off,path=$(libbusybox.so tty)"
    set -- "${@}" "-monitor" "chardev:monitor0"
    set -- "${@}" "-chardev" "socket,id=ttyS0,path=${TMPDIR}/serial0.sock"
    set -- "${@}" "-chardev" "socket,id=ttyS1,path=${TMPDIR}/serial1.sock"
    set -- "${@}" "-chardev" "socket,id=ttyS2,path=${TMPDIR}/serial2.sock"
    set -- "${@}" "-chardev" "socket,id=ttyS3,path=${TMPDIR}/serial3.sock"
    set -- "${@}" "-chardev" "socket,id=ttyS4,path=${TMPDIR}/serial4.sock"
    set -- "${@}" "-device" "virtio-gpu"
    set -- "${@}" "-serial" "chardev:ttyS0"
    set -- "${@}" "-device" "pci-serial-4x,chardev1=ttyS1,chardev2=ttyS2,chardev3=ttyS3,chardev4=ttyS4"
    # Disable parallel port.
    set -- "${@}" "-smp" "2"

    # Set path to firmware & keymap files.
    set -- "${@}" "-bios" "${PREFIX}/share/qemu/opensbi_fw_payload.bin"

    msg
    echo -ne "\\a"
    unblock_terminal
    libbusybox.so chmod -R 777 /data/data/fish4terrisa.archlinux.riscv64/files/environment/lib
    if [ -f "/storage/emulated/0/archriscv.qcow2" ]; then
    msg "Found /storage/emulated/0/archriscv-qcow2"
    else
	if [ -f "/data/data/fish4terrisa.archlinux.riscv64/files/environment/archriscv-demo.qcow2" ]; then
    	    libadvcp.so -gn "/data/data/fish4terrisa.archlinux.riscv64/files/environment/archriscv-demo.qcow2" "/storage/emulated/0/archriscv.qcow2"
	fi
    fi
    if [ -f "/data/data/fish4terrisa.archlinux.riscv64/files/environment/archriscv-demo.qcow2" ]; then
    set -- "${@}" "-device" "virtio-blk-device,drive=fish1"
    set -- "${@}" "-drive" "file=/data/data/fish4terrisa.archlinux.riscv64/files/environment/archriscv-demo.qcow2,snapshot=off,format=qcow2,id=fish1"
    fi
    if [ -f "/storage/emulated/0/archriscv-demo.qcow2" ];then
	    set -- "${@}" "-device" "virtio-blk-device,drive=fish2"
	    set -- "${@}" "-drive" "file=/storage/emulated/0/archriscv-demo.qcow2,snapshot=off,format=qcow2,id=fish2"
fi
    LD_LIBRARY_PATH=${PREFIX}/lib libqemu.so "${@}"
    qemu_ret="${?}"

    if [ ${qemu_ret} -ne 0 ]; then
        msg
        libbusybox.so stty sane
        read -rs -p "Press enter to exit..."
    fi

    exec libbash.so -c "libbusybox.so killall -9 libsocat.so; libbusybox.so killall -9 libbash.so; exit ${qemu_ret}" > /dev/null 2>&1
}
rvvm_session(){
	librvvm.so /storage/emulated/0/opensbi.bin -m 2g -s 4 -i /sdcard/arch.img -jitcache 128M -k /sdcard/rvvm-linux -append "earlyprintk rw root=/dev/nvme0n1p1 rootwait rootfstype=ext4 LANG=en_US.UTF-8"

}
# Handle connections to serial consoles (ttyS0-3).
serial_console_session() {
    #libbusybox.so chmod 777 -R /data/data/fish4terrisa.archlinux.riscv64/
    #exec libsocat.so "$(libbusybox.so tty)",rawer "UNIX-LISTEN:${TMPDIR}/serial$1.sock,unlink-early"
    libbusybox.so chmod 777 -R ${TMPDIR}
}
##############################################################################

# Ensure that following files and directories are read-writable.
libbusybox.so chmod -R 777 "${PREFIX}/tmp" > /dev/null 2>&1 || true
libbusybox.so chmod -R 777 /data/data/fish4terrisa.archlinux.riscv64/ 
if [ "${#}" -gt 0 ]; then
    # $1 specifies session type. For available values, see client
    # application sources.
    if [ "${1}" = 0 ]; then
	rvvm_session
    elif [ "${1}" = 1 ]; then
        rvvm_session sandbox-mode
    elif [ "${1}" = 2 ]; then
        serial_console_session "${SERIAL_CONSOLE_NUMBER}"
    else
        # This should never happen.
        msg
        msg "[BUG]: Got unknown session type '${1}'."
        msg
        libbusybox.so stty sane
        read -rs -p "Press enter to exit..."
        exit 1
    fi
else
    # This should never happen.
    msg
    msg "[BUG]: No session type specified."
    msg
    libbusybox.so stty sane
    read -rs -p "Press enter to exit..."
    exit 1
fi
